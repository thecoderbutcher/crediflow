// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String     @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         String
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  customer      Customer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Customer {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String
  idperson   String
  address    String
  phone      String
  notes      String?
  status     Boolean  @default(true)
  statusPay  Boolean?
  employeeId String
  loans      Loan[]
  employee   User     @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("Customers")
}

model Loan {
  id                     Int              @id @default(autoincrement())
  amount                 Float
  amountWithInstallments Float
  interest               Int
  loanTypeId             Int
  loanType               LoanType         @relation(fields: [loanTypeId], references: [id])
  paymentDate            DateTime
  paymentFrequencyId     Int
  paymentFrequency       PaymentFrequency @relation(fields: [paymentFrequencyId], references: [id])
  totalInstallments      Int
  customerId             String
  notes                  String
  statusId               Int              @default(1)
  status                 LoanStatus       @relation(fields: [statusId], references: [id])
  customer               Customer         @relation(fields: [customerId], references: [id])
  instalments            Installments[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
}

model LoanType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  loans Loan[]
}

model PaymentFrequency {
  id    Int    @id @default(autoincrement())
  name  String @unique
  loans Loan[]
}

model LoanStatus {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  loans        Loan[]
  installments Installments[]
}

model Installments {
  id               Int        @id @default(autoincrement())
  i_number         Int
  value            Float
  paidDate         DateTime?
  expirationDate   DateTime
  loanId           Int
  loan             Loan       @relation(fields: [loanId], references: [id])
  statusId         Int        @default(1)
  status           LoanStatus @relation(fields: [statusId], references: [id])
  confirmationPaid Boolean    @default(false)
}
