// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  customer Customer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Customer {
  id String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String
  idperson   String
  address    String
  phone      String
  notes      String?
  statusPay  Boolean? 
  employeeId String
  loans     Loan[]
  employee   User @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("Customers")
}

model Loan {
  id                String   @id @default(cuid())
  amount            Float
  customerId        String
  customer          Customer @relation(fields: [customerId], references: [id])
  loanTypeId        String
  loanType          LoanType @relation(fields: [loanTypeId], references: [id])
  paymentFrequencyId String
  paymentFrequency  PaymentFrequency @relation(fields: [paymentFrequencyId], references: [id])
  statusId          String
  status            LoanStatus @relation(fields: [statusId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LoanType {
  id   String @id @default(cuid())
  name String @unique
  loans Loan[]
}

model PaymentFrequency {
  id   String @id @default(cuid())
  name String @unique
  loans Loan[]
}

model LoanStatus {
  id   String @id @default(cuid())
  name String @unique
  loans Loan[]
}